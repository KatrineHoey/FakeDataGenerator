@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<h3>Humidity</h3>

@if (on == false)
{
    <button class="btn btn-danger" @onclick="@(() => StartHumidityDataGenerator())">Start</button>

    <button class="btn btn-success" @onclick="@(() => StopHumidityDataGenerator())">Stop</button>
}
else
{
    <button class="btn btn-success" @onclick="@(() => StartHumidityDataGenerator())">Start</button>

    <button class="btn btn-danger" @onclick="@(() => StopHumidityDataGenerator())">Stop</button>
}


@code {

    private static bool on = false;

    async Task StartHumidityDataGenerator()
    {
        if (on == false)
        {
            on = true;
            await http.PostAsJsonAsync("api/humidity", 1);
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Generator is already started!");
        }

    }

    async Task StopHumidityDataGenerator()
    {

        if (on == true)
        {
            on = false;
            await http.PostAsJsonAsync("api/humidity", 2);
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Generator is already stopped!");
        }
    }

}
